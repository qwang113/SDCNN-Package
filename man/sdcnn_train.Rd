% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sdcnn_train.R
\name{sdcnn_train}
\alias{sdcnn_train}
\title{Train a Spatial Deep Convolutional Neural Network (SDCNN) proposed by Qi Wang, Paul A. Parker, and Robert Lund. "Spatial deep convolutional neural networks." Spatial Statistics (2025): 100883.}
\usage{
sdcnn_train(
  coords,
  X = NULL,
  y,
  venv,
  basis_kernel = "Gaussian",
  pred_drop = 0.1,
  train_prop = 0.9,
  model_saving_path = here::here(),
  optimizer = "adam",
  loss_fun = "mse",
  epoch = 10,
  bat_size = 1000
)
}
\arguments{
\item{coords}{A matrix (n x 2) where the first column is longitude and the second column is latitude, and n is the number of observations.}

\item{X}{A matrix (n x p) of covariates, or NULL. Note that longitude and latitude has been included by default. This matrix stands for other covariates.}

\item{y}{A numeric vector (n x 1) of response values.}

\item{venv}{The name of the Conda virtual environment to use. Note only specific combination of packages is working, for the environment that the authors are using, refer to: https://github.com/qwang113/Spatial-Deep-Convolutional-Neural-Networks/blob/main/tf_gpu.yaml}

\item{basis_kernel}{The kernel type for basis function construction (default is "Gaussian"). Possible choices are discussed in the FRK::auto_basis() function.}

\item{pred_drop}{Dropout rate for prediction layers.}

\item{train_prop}{The proportion of data used for training (default 0.9). The rest are used to apply early stopping}

\item{model_saving_path}{Path for saving the model (default: current directory).}

\item{optimizer}{Optimization method (default: "adam"). For more options refer to keras::compile().}

\item{loss_fun}{Loss function for training (default: "mse"). For more options refer to keras::compile().}

\item{epoch}{Number of training epochs.}

\item{bat_size}{Batch size.}
}
\value{
A trained SDCNN model.
}
\description{
This function trains an SDCNN model for spatial prediction.
}
\examples{
\dontrun{
 load("data/eh.Rdata")
basis_kernel = "Gaussian"
venv = "tf_gpu"
coords <- eh_dat[,1:2]
y <- eh_dat[,3]
pred_drop <- 0.1
train_prop <- 0.9
model_saving_path <- here::here()
X <- NULL
optimizer = "adam"
loss_fun = "mse"
epoch = 1000
bat_size = 1000
model <- sdcnn_train(coords, X = NULL, y, venv, basis_kernel = "Gaussian", pred_drop = 0.1, train_prop = 0.9,model_saving_path = here::here(), optimizer = "adam", loss_fun = "mse", epoch = 10, bat_size = 1000)
}
}
